# package containing hybrid encryption internal implementations of PQC primitives

package(default_visibility = ["//:__subpackages__"])

licenses(["notice"])

cc_library(
    name = "cecpq2_aead_hkdf_hybrid_decrypt",
    srcs = ["cecpq2_aead_hkdf_hybrid_decrypt.cc"],
    hdrs = ["cecpq2_aead_hkdf_hybrid_decrypt.h"],
    include_prefix = "tink/experimental/pqcrypto/cecpq2/hybrid/internal",
    deps = [
        "//:hybrid_decrypt",
        "//experimental/pqcrypto/cecpq2/hybrid:cecpq2_aead_hkdf_dem_helper",
        "//experimental/pqcrypto/cecpq2/subtle:cecpq2_hkdf_recipient_kem_boringssl",
        "//experimental/pqcrypto/cecpq2/subtle:cecpq2_subtle_boringssl_util",
        "//internal:ec_util",
        "//experimental/pqcrypto/proto:cecpq2_aead_hkdf_cc_proto",
        "//util:enums",
        "//util:secret_data",
        "//util:status",
        "//util:statusor",
        "@boringssl//:crypto",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
    ],
)

cc_library(
    name = "cecpq2_aead_hkdf_hybrid_encrypt",
    srcs = ["cecpq2_aead_hkdf_hybrid_encrypt.cc"],
    hdrs = ["cecpq2_aead_hkdf_hybrid_encrypt.h"],
    include_prefix = "tink/experimental/pqcrypto/cecpq2/hybrid/internal",
    deps = [
        "//:aead",
        "//:hybrid_encrypt",
        "//experimental/pqcrypto/cecpq2/hybrid:cecpq2_aead_hkdf_dem_helper",
        "//experimental/pqcrypto/cecpq2/subtle:cecpq2_hkdf_sender_kem_boringssl",
        "//experimental/pqcrypto/cecpq2/subtle:cecpq2_subtle_boringssl_util",
        "//experimental/pqcrypto/proto:cecpq2_aead_hkdf_cc_proto",
        "//util:enums",
        "//util:status",
        "//util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

# tests

cc_test(
    name = "cecpq2_aead_hkdf_hybrid_encrypt_test",
    size = "small",
    srcs = ["cecpq2_aead_hkdf_hybrid_encrypt_test.cc"],
    deps = [
        ":cecpq2_aead_hkdf_hybrid_encrypt",
        "//:hybrid_encrypt",
        "//:registry",
        "//aead:aes_gcm_key_manager",
        "//experimental/pqcrypto/cecpq2/subtle:cecpq2_subtle_boringssl_util",
        "//experimental/pqcrypto/cecpq2/util:test_util",
        "//subtle:random",
        "//subtle:subtle_util",
        "//util:enums",
        "//util:statusor",
        "//util:test_matchers",
        "//util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "cecpq2_aead_hkdf_hybrid_decrypt_test",
    size = "large",
    srcs = ["cecpq2_aead_hkdf_hybrid_decrypt_test.cc"],
    deps = [
        ":cecpq2_aead_hkdf_hybrid_decrypt",
        ":cecpq2_aead_hkdf_hybrid_encrypt",
        "//:hybrid_decrypt",
        "//:registry",
        "//aead:aes_ctr_hmac_aead_key_manager",
        "//aead:aes_gcm_key_manager",
        "//aead:xchacha20_poly1305_key_manager",
        "//config:tink_config",
        "//daead:aes_siv_key_manager",
        "//experimental/pqcrypto/cecpq2/subtle:cecpq2_subtle_boringssl_util",
        "//experimental/pqcrypto/cecpq2/util:test_util",
        "//experimental/pqcrypto/proto:cecpq2_aead_hkdf_cc_proto",
        "//subtle:common_enums",
        "//subtle:random",
        "//subtle:subtle_util",
        "//util:enums",
        "//util:secret_data",
        "//util:status",
        "//util:statusor",
        "//util:test_matchers",
        "//util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)
